# -*- coding: utf-8 -*-
"""generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyCQL-KnkJ5Ii6hccpRC72iBrIugvbnf
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
import torchvision.transforms as transforms
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import trimesh
import sys
sys.path.append("/content/drive/My Drive/pix3d/byop-2425/models")
from gan2 import CompactGenerator, CompactDiscriminator

# !pip install trimesh

def generate_3d_object(generator, image, device):
  generator.eval()
  generator.to(device)

  z = torch.randn(1, 50).to(device)

  ref_image = ref_image.to(device)
  if len(reference_image.shape) == 3:
        reference_image = reference_image.unsqueeze(0)

  with torch.no_grad():
      generated_voxels = generator(ref_image, z)

  voxels_np = generated_voxels.squeeze().cpu().numpy()

  return voxels_np

def visualise_voxels(voxels, threshold = 0.5):
  binary_voxels = voxels > threshold

  x, y, z = np.where(binary_voxels)

  fig = plt.figure(figsize=(10,10))
  ax = fig.add_subplot(111, projection='3d')
  ax.scatter(x, y, z, c='r', alpha=0.1)
  ax.set_xlabel('X')
  ax.set_ylabel('Y')
  ax.set_zlabel('Z')
  plt.title('Generated 3D Voxel Object')
  plt.show()

def main():
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    generator = CompactGenerator(img_dim=3, hidden_dim=16, latent_dim=50).to(device)
    generator.load_state_dict(torch.load('/content/drive/MyDrive/pix3d/byop-2425/generator_epoch_5.pth'))
    img_path = "/content/drive/MyDrive/pix3d/img/bed/0001.png"
    reference_image = plt.imread(img_path)
    transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),])
    reference_image = transform(reference_image)
    generated_voxels = generate_3d_object(generator, reference_image, device)
    visualise_voxels(generated_voxels)

def voxels_to_mesh(voxels, threshold=0.5):

    binary_voxels = voxels > threshold
    mesh = trimesh.voxel.make_mesh(binary_voxels)

    mesh.export('generated_object.obj')
    return mesh

main()

