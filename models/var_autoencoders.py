# -*- coding: utf-8 -*-
"""var_autoencoders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r97eud9r-H6RlTu4K60xz8rGNFIfg3UK
"""

import numpy as np
import torch
import torch.nn as nn
# import torch.nn.functional as F
# import torch.optim as optim
# import matplotlib.pyplot as plt
import pandas as pd

class encoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(encoder, self).__init__()
        self.conv1 = nn.Conv2d(input_dim, hidden_dim, kernel_size=4, stride=2, padding=1)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim*2, kernel_size=4, stride=2, padding=1)
        self.conv3 = nn.Conv2d(hidden_dim*2, hidden_dim*4, kernel_size=4, stride=2, padding=1)
        #mean of the latent space
        self.fc_mu = nn.Linear(hidden_dim*4*4*4, latent_dim)
        #log variance
        self.fc_logvar = nn.Linear(hidden_dim*4*4*4, latent_dim)
        self.relu = nn.LeakyReLU(0.2)
        self.bn1 = nn.BatchNorm2d(hidden_dim)
        self.bn2 = nn.BatchNorm2d(hidden_dim*2)
        self.bn3 = nn.BatchNorm2d(hidden_dim*4)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu(x)
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu(x)
        x = x.view(x.size(0),-1)
        mu = self.fc_mu(x)
        logvar = self.fc_logvar(x)

        return mu,logvar

class decoder(nn.Module):
  def __init__(self, latent_dim, hidden_dim, output_dim):
    super(decoder, self).__init__()
    self.conv1 = nn.ConvTranspose2d(latent_dim, hidden_dim*4, kernel_size=4, stride=2, padding=1)
    self.conv2 = nn.ConvTranspose2d(hidden_dim*4, hidden_dim*2, kernel_size= 4, stride=2, padding=1)
    self.conv3 = nn.ConvTranspose2d(hidden_dim*2, hidden_dim, kernel_size=4, stride=2, padding=1)
    self.conv4 = nn.ConvTranspose2d(hidden_dim, output_dim, kernel_size=4, stride=2, padding=1)
    self.relu = nn.LeakyReLU(0.2)
    self.bn1 = nn.BatchNorm2d(hidden_dim*4)
    self.bn2 = nn.BatchNorm2d(hidden_dim*2)
    self.bn3 = nn.BatchNorm2d(hidden_dim)
    self.tanh = nn.Tanh()

  def forward(self, x):
    x = x.view(x.size(0),-1,1,1)
    x = self.conv1(x)
    x = self.bn1(x)
    x = self.relu(x)
    x = self.conv2(x)
    x = self.bn2(x)
    x = self.relu(x)
    x = self.conv3(x)
    x = self.bn3(x)
    x = self.relu(x)
    x = self.conv4(x)
    x = self.tanh(x)
    return x

class VAE(nn.Module):
  def __init__(self, input_dim, hidden_dim, latent_dim):
    super(VAE, self).__init__()
    self.encoder = encoder(input_dim, hidden_dim, latent_dim)
    self.decoder = decoder(latent_dim, hidden_dim, input_dim)
    self.latent_dim = latent_dim
    self.input_dim = input_dim

  def reparameterize(self, mu, logvar):
    std = torch.exp(0.5*logvar)
    eps = torch.randn_like(std)
    return mu + eps*std

  def forward(self, x):
    mu, logvar = self.encoder(x)
    z = self.reparameterize(mu, logvar)
    x_hat = self.decoder(z)
    return x_hat,mu,logvar

